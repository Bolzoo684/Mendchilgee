import React, { useEffect, useRef, useState } from 'react';
import { Camera, Upload, AlertCircle, Sparkles, Heart, QrCode } from 'lucide-react';
import QrScanner from 'qr-scanner';
import { GreetingCard, QRData } from '../types';
import { decryptData } from '../utils/encryption';
import { getGreetingCard, updateCardAccess } from '../utils/storage';

interface QRScannerProps {
  onScanResult: (result: { success: boolean; message?: GreetingCard; error?: string }) => void;
}

const QRScanner: React.FC<QRScannerProps> = ({ onScanResult }) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [qrScanner, setQrScanner] = useState<QrScanner | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [hasCamera, setHasCamera] = useState(false);
  const [cameraError, setCameraError] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  useEffect(() => {
    const initializeScanner = async () => {
      if (!videoRef.current) return;

      try {
        const hasPermission = await QrScanner.hasCamera();
        setHasCamera(hasPermission);

        if (hasPermission) {
          const scanner = new QrScanner(
            videoRef.current,
            (result) => {
              if (!isProcessing) {
                handleScanResult(result.data);
              }
            },
            {
              highlightScanRegion: true,
              highlightCodeOutline: true,
              preferredCamera: 'environment',
            }
          );

          setQrScanner(scanner);
        }
      } catch (error) {
        console.error('–°–∫–∞–Ω–Ω–µ—Ä —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', error);
        setCameraError('üì∑ –ö–∞–º–µ—Ä—Ç —Ö–∞–Ω–¥–∞—Ö —ç—Ä—Ö ”©–≥–Ω”© “Ø“Ø');
      }
    };

    initializeScanner();

    return () => {
      if (qrScanner) {
        qrScanner.destroy();
      }
    };
  }, [isProcessing]);

  const handleScanResult = async (data: string) => {
    setIsProcessing(true);
    
    try {
      const qrData: QRData = JSON.parse(data);
      
      if (!qrData.id || !qrData.encryptedData) {
        throw new Error('–ë—É—Ä—É—É QR –∫–æ–¥—ã–Ω —Ñ–æ—Ä–º–∞—Ç');
      }

      const decryptedData = decryptData(qrData.encryptedData);
      const card: GreetingCard = JSON.parse(decryptedData);

      // –ö–∞—Ä—Ç –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö –±–æ–ª–æ–Ω —Ö“Ø—á–∏–Ω—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
      const storedCard = getGreetingCard(card.id);
      if (!storedCard) {
        // –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–ª–¥–∞–∞–Ω—ã –º–µ—Å—Å–µ–∂
        onScanResult({ 
          success: false, 
          error: 'expired' // –¢—É—Å–≥–∞–π —Ç”©—Ä”©–ª 
        });
        return;
      }

      // –°–∫–∞–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–æ–ª—Å–æ–Ω –∞–Ω–∏–º—ç–π—à–Ω —Ö–∞—Ä—É—É–ª–∞—Ö
      if (qrScanner) {
        qrScanner.stop();
        setIsScanning(false);
      }

      // –•–∞–Ω–¥–∞–ª—Ç—ã–Ω —Ç–æ–æ–≥ —à–∏–Ω—ç—á–ª—ç—Ö
      updateCardAccess(card.id);

      // –ñ–∞–∞—Ö–∞–Ω —Ö“Ø–ª—ç—ç–≥—ç—ç–¥ –¥–∞—Ä–∞–∞ –Ω—å “Ø—Ä –¥“Ø–Ω–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
      setTimeout(() => {
        onScanResult({ success: true, message: storedCard });
      }, 500);
      
    } catch (error) {
      console.error('QR —Å–∫–∞–Ω –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', error);
      onScanResult({ 
        success: false, 
        error: 'üîç QR –∫–æ–¥ —Ç–∞–Ω–∏–≥–¥—Å–∞–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É!' 
      });
    } finally {
      setTimeout(() => {
        setIsProcessing(false);
      }, 1000);
    }
  };

  const startScanning = async () => {
    if (!qrScanner) return;

    try {
      setIsScanning(true);
      setCameraError(null);
      await qrScanner.start();
    } catch (error) {
      console.error('–ö–∞–º–µ—Ä –∞—Å–∞–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', error);
      setCameraError('üì∑ –ö–∞–º–µ—Ä—ã–Ω –∑”©–≤—à”©”©—Ä”©–ª —Ö—ç—Ä—ç–≥—Ç—ç–π –±–∞–π–Ω–∞');
      setIsScanning(false);
    }
  };

  const stopScanning = () => {
    if (qrScanner) {
      qrScanner.stop();
      setIsScanning(false);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);

    QrScanner.scanImage(file, { returnDetailedScanResult: true })
      .then((result) => {
        handleScanResult(result.data);
      })
      .catch((error) => {
        console.error('–§–∞–π–ª —Å–∫–∞–Ω —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', error);
        onScanResult({ 
          success: false, 
          error: 'üì∏ –ó—É—Ä–≥–∞–Ω –¥–æ—Ç—Ä–æ–æ—Å QR –∫–æ–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π' 
        });
        setIsProcessing(false);
      });
  };

  return (
    <div className="max-w-2xl mx-auto animate-fade-in">
      <div className="bg-white rounded-xl shadow-lg p-8">
        <div className="text-center mb-6">
          <div className="w-16 h-16 bg-gradient-to-br from-purple-100 to-pink-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-bounce-in">
            <QrCode className="h-8 w-8 text-purple-600" />
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2 animate-slide-up">
            ‚ú® –ú—ç–Ω–¥—á–∏–ª–≥—ç—ç–≥—ç—ç –Ω—ç—ç—Ü–≥—ç—ç–µ
          </h2>
          <p className="text-gray-600 animate-slide-up-delay">
            QR –∫–æ–¥–æ–æ —É–Ω—à—É—É–ª—Å–Ω–∞–∞—Ä —Ç–∞–Ω–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω –æ–Ω—Ü–≥–æ–π –º—ç–Ω–¥—á–∏–ª–≥—ç—ç–≥ “Ø–∑—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π
          </p>
        </div>

        {/* –ö–∞–º–µ—Ä—ã–Ω —Å–∫–∞–Ω–Ω–µ—Ä */}
        {hasCamera && !cameraError && (
          <div className="mb-6">
            <div className="relative bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl overflow-hidden">
              <video
                ref={videoRef}
                className="w-full h-80 object-cover"
                style={{ display: isScanning ? 'block' : 'none' }}
              />
              
              {!isScanning && (
                <div className="w-full h-80 flex items-center justify-center">
                  <div className="text-center">
                    <div className="w-20 h-20 bg-white/80 rounded-full flex items-center justify-center mx-auto mb-4 animate-float">
                      <Camera className="h-10 w-10 text-purple-600" />
                    </div>
                    <p className="text-gray-700 mb-4 font-medium">–ö–∞–º–µ—Ä–∞–∞ –∞—Å–∞–∞–∂ QR –∫–æ–¥ —É–Ω—à—É—É–ª–Ω–∞ —É—É</p>
                    <button
                      onClick={startScanning}
                      className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-8 py-3 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all transform hover:scale-105 shadow-lg"
                    >
                      <Camera className="inline-block h-4 w-4 mr-2" />
                      –ö–∞–º–µ—Ä –∞—Å–∞–∞—Ö
                    </button>
                  </div>
                </div>
              )}

              {/* –°–∫–∞–Ω —Ö–∏–π–∂ –±–∞–π—Ö “Ø–µ–∏–π–Ω –∞–Ω–∏–º—ç–π—à–Ω */}
              {isScanning && (
                <div className="absolute inset-0 pointer-events-none">
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                    <div className="w-48 h-48 border-4 border-purple-400 rounded-lg animate-scan-line"></div>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <Sparkles className="h-8 w-8 text-purple-600 animate-pulse" />
                    </div>
                  </div>
                </div>
              )}

              {/* –ë–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π—Ö “Ø–µ–∏–π–Ω –∞–Ω–∏–º—ç–π—à–Ω */}
              {isProcessing && (
                <div className="absolute inset-0 bg-white/90 flex items-center justify-center">
                  <div className="text-center">
                    <Heart className="h-12 w-12 text-pink-600 animate-bounce mx-auto mb-2" />
                    <p className="text-purple-700 font-medium">–¢–∞–Ω–∏–≥–¥–∞–∂ –±–∞–π–Ω–∞...</p>
                  </div>
                </div>
              )}
            </div>
            
            {isScanning && (
              <div className="text-center mt-4 animate-fade-in">
                <button
                  onClick={stopScanning}
                  className="bg-gradient-to-r from-red-500 to-pink-600 text-white px-6 py-3 rounded-lg hover:from-red-600 hover:to-pink-700 transition-all shadow-md transform hover:scale-105"
                >
                  –ó–æ–≥—Å–æ–æ—Ö
                </button>
              </div>
            )}
          </div>
        )}

        {/* –ö–∞–º–µ—Ä—ã–Ω –∞–ª–¥–∞–∞ */}
        {cameraError && (
          <div className="mb-6 p-4 bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg animate-slide-up">
            <div className="flex items-center">
              <AlertCircle className="h-5 w-5 text-purple-600 mr-2" />
              <p className="text-purple-700">{cameraError}</p>
            </div>
          </div>
        )}

        {/* –§–∞–π–ª —Ö—É—É–ª–∞—Ö —Å–æ–Ω–≥–æ–ª—Ç */}
        <div className="border-t pt-6">
          <div className="text-center">
            <div className="w-16 h-16 bg-gradient-to-br from-purple-100 to-pink-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-float">
              <Upload className="h-8 w-8 text-purple-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-800 mb-2">
              üñºÔ∏è –ó—É—Ä–∞–≥ –æ—Ä—É—É–ª–∞—Ö
            </h3>
            <p className="text-gray-600 mb-4">
              –ö–∞–º–µ—Ä –∞—à–∏–≥–ª–∞—Ö–≥“Ø–π–≥—ç—ç—Ä QR –∫–æ–¥ –±“Ø—Ö–∏–π –∑—É—Ä–≥–∞–∞ –æ—Ä—É—É–ª–∂ –±–æ–ª–Ω–æ
            </p>
            
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleFileUpload}
              className="hidden"
              disabled={isProcessing}
            />
            
            <button
              onClick={() => fileInputRef.current?.click()}
              disabled={isProcessing}
              className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-3 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all transform hover:scale-105 shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Upload className="inline-block h-4 w-4 mr-2" />
              –ó—É—Ä–∞–≥ —Å–æ–Ω–≥–æ—Ö
            </button>
          </div>
        </div>

        {/* –ó–∞–∞–≤–∞—Ä */}
        <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg animate-slide-up-delay">
          <h4 className="font-semibold text-blue-800 mb-2 flex items-center">
            <Sparkles className="h-4 w-4 mr-1" />
            –ñ–∏–∂–∏–≥ –∑”©–≤–ª”©–º–∂
          </h4>
          <ul className="text-sm text-blue-700 space-y-2">
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">üì±</span>
              <span>QR –∫–æ–¥—ã–≥ –∫–∞–º–µ—Ä—ã–Ω —Ö“Ø—Ä—ç—ç–Ω–¥ –±–∞–≥—Ç–∞–∞—Ö–∞–¥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ç–∞–Ω–∏–Ω–∞</span>
            </li>
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">üí°</span>
              <span>–°–∞–π–Ω –≥—ç—Ä—ç–ª—Ç—ç–π –≥–∞–∑–∞—Ä —Å–∫–∞–Ω —Ö–∏–π–≤—ç–ª –∏–ª“Ø“Ø –∞–º–∞—Ä—Ö–∞–Ω</span>
            </li>
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">üéÅ</span>
              <span>–ú—ç–Ω–¥—á–∏–ª–≥—ç—ç –Ω—ç–≥ –ª —É–¥–∞–∞ –Ω—ç—ç–≥–¥—ç—Ö —Ç—É–ª –∞–Ω—Ö–∞–∞—Ä–∞–ª—Ç–∞–π –±–∞–π–≥–∞–∞—Ä–∞–π</span>
            </li>
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">‚è∞</span>
              <span>24 —Ü–∞–≥–∏–π–Ω –¥–æ—Ç–æ—Ä –Ω—ç—ç–≥—ç—ç—Ä—ç–π, —ç—Å –±”©–≥”©”©—Å —É—Å—Ç–∞–Ω–∞</span>
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default QRScanner;